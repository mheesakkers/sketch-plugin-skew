var onRun = function(context, skewHorizontal = true) {
	var sketch = require('sketch')
  var UI = require('sketch/ui')
  var doc = context.document
  var selection = sketch.getSelectedDocument().selectedLayers

  var inputSkewAngle = parseFloat( [doc askForUserInput:"Define a skew angle (Range: -90 - 90)?" initialValue:"10"] ).toFixed(1)
  inputSkewAngle = checkInputSkewAngle(inputSkewAngle)

  if (selection.length > 0) {

    // Loop through selection and get all shape layers
    var shapeLayers = [];
    selection.forEach( function iterate(layer) {
      layer.type === 'ShapePath' && shapeLayers.push(layer.sketchObject);
      layer.type === 'Text' && UI.message('This plugins works only for shape layers.')
      layer.type === 'Image' && UI.message('This plugins works only for shape layers.')
      if (layer.layers) {
        layer.layers.forEach(iterate)
      }
      // log(layer.type);
    });

    // Loop over shape layers
    shapeLayers.forEach(layer => {
      const shape = layer.isMemberOfClass(MSShapeGroup) ? layer.layers()[0] : layer
      // shape.flattenedLayer();
      
      var shapeWidth = shape.absoluteRect().width()
      var shapeHeight = shape.absoluteRect().height()
      var points = shape.points()

      if (points.length > 0) {
        if (skewHorizontal) {
          const skewAngleFactor = shapeHeight / shapeWidth
          // log(skewAngleFactor)
          points.forEach(p => {
            p.point = skewX( p.point(), inputSkewAngle, skewAngleFactor)
          })
          UI.message('Skewed horizontally by ' + inputSkewAngle + '°')      
        } else {
          const skewAngleFactor = shapeWidth / shapeHeight
          // log(skewAngleFactor)
        	points.forEach(p => {
            const skewAngleFactor = shapeWidth / shapeHeight
        		p.point = skewY( p.point(), inputSkewAngle, skewAngleFactor)
        	})
          UI.message('Skewed vertically by ' + inputSkewAngle + '°')  
        }
      }

      var flattened = shape.flattenedLayer();   // Converts custom shapes into MSShapePathLayer
      
      var flattener = MSLayerFlattener.alloc().init();
      flattener.flattenLayer_options(flattened, 2);// includes removing duplicate points
            
      var group = shape.parentGroup();
      group.insertLayer_afterLayer(flattened, shape);
      group.removeLayer(shape);

    })

  } else {
    UI.message('No shape layers selected.')
  }    
}

// Skew functionality
function skewX (point, angle, factor) {
  const skewedX = point.x + point.y * (1 / Math.tan( -toRadians( 270.0 - angle)) ) * factor // 270 degrees is the base angle  & I invert the radians to match Illustrators orientation
  return { x: skewedX, y: point.y } // Return horizontal skew
}

function skewY (point, angle, factor) {
  const skewedY = point.y + point.x * (1 / Math.tan( toRadians( 270.0 - angle)) ) * factor
  return { x: point.x, y: skewedY } // Return vertical skew
}

function checkInputSkewAngle (angle) {
  var UI = require('sketch/ui')
  var maxmin = 89

  if (angle < -maxmin) {
    angle = -maxmin
    UI.message('Skew angle is set to -' + maxmin + ', the min limit to skew. Otherwise the artwork gets too big.')
  }
  if (angle > maxmin) {
    angle = maxmin
    UI.message('Skew angle is set to ' + maxmin + ', the max limit to skew. Otherwise the artwork gets too big.')
  }

  return angle;
}

// Helpers // 
function toRadians (angle) {
  return angle * (Math.PI / 180);
}

// Command handlers
var skewHorizontalHandler = function (context) {
  onRun(context, true)
}

var skewVerticalHandler = function (context) {
  onRun(context, false)
}

// Doesn't work with:
// 1. Bezier points give wrong results
// 2. Multiple shapes